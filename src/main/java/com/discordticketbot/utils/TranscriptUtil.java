package com.discordticketbot.utils;

import com.discordticketbot.database.CloseRequestDAO;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.entities.MessageEmbed;
import net.dv8tion.jda.api.entities.MessageReaction;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class TranscriptUtil {

    // Use UTC+08:00 timezone (Malaysia/Singapore timezone)
    private static final ZoneOffset TIMEZONE_OFFSET = ZoneOffset.ofHours(8);
    private static final String TIMEZONE_SUFFIX = " UTC+08:00";

    // Pattern to match Discord timestamp format <t:timestamp:format>
    private static final Pattern DISCORD_TIMESTAMP_PATTERN = Pattern.compile("<t:(\\d+):[FfDdTtRr]>");
    private static final DateTimeFormatter TRANSCRIPT_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    /**
     * Creates a plain text transcript content from channel messages.
     * Enhanced to include close request details and better formatting.
     */
    public static String createTranscriptContent(TextChannel channel, List<Message> messages) {
        StringBuilder transcript = new StringBuilder();

        // Sort messages to be in chronological order (oldest first)
        List<Message> sortedMessages = messages.stream()
                .sorted((m1, m2) -> m1.getTimeCreated().compareTo(m2.getTimeCreated()))
                .toList();

        // Header
        transcript.append("=== DISCORD TICKET TRANSCRIPT ===\n");
        transcript.append("Server: ").append(channel.getGuild().getName()).append("\n");
        transcript.append("Channel: ").append(channel.getName()).append("\n");
        transcript.append("Category: ").append(channel.getParentCategory() != null ? channel.getParentCategory().getName() : "None").append("\n");
        transcript.append("Total Messages: ").append(sortedMessages.size()).append("\n");
        transcript.append("Generated: ").append(LocalDateTime.now(TIMEZONE_OFFSET).format(TRANSCRIPT_FORMATTER)).append(TIMEZONE_SUFFIX).append("\n");
        transcript.append("Generated by: Bot System\n");

        // Add close request information if available
        appendCloseRequestInfo(channel.getId(), transcript);

        transcript.append("=====================================\n\n");

        // Messages
        for (Message msg : sortedMessages) {
            String timestamp = msg.getTimeCreated().atZoneSameInstant(TIMEZONE_OFFSET).format(TRANSCRIPT_FORMATTER);
            transcript.append(String.format("[%s%s] %s: %s\n", timestamp, TIMEZONE_SUFFIX, msg.getAuthor().getName(), processMessageContent(msg.getContentDisplay())));

            if (!msg.getEmbeds().isEmpty()) {
                for (MessageEmbed embed : msg.getEmbeds()) {
                    transcript.append("    [EMBED] Title: ").append(embed.getTitle() != null ? embed.getTitle() : "No Title").append("\n");
                    if (embed.getDescription() != null) {
                        String description = convertDiscordTimestamps(embed.getDescription());
                        // Enhanced parsing for close requests
                        description = enhanceCloseRequestInfo(description);
                        transcript.append("    [EMBED] Description: ").append(description).append("\n");
                    }

                    // Process embed fields for additional close request details
                    if (!embed.getFields().isEmpty()) {
                        for (MessageEmbed.Field field : embed.getFields()) {
                            if (field.getName() != null && field.getValue() != null) {
                                transcript.append("    [EMBED] ").append(field.getName()).append(": ").append(field.getValue()).append("\n");
                            }
                        }
                    }
                }
            }

            if (!msg.getAttachments().isEmpty()) {
                for (Message.Attachment attachment : msg.getAttachments()) {
                    transcript.append("    [ATTACHMENT] ").append(attachment.getFileName())
                            .append(" (").append(getReadableFileSize(attachment.getSize())).append(")")
                            .append(" - ").append(attachment.getUrl()).append("\n");
                }
            }

            if (!msg.getReactions().isEmpty()) {
                transcript.append("    [REACTIONS] ");
                for (MessageReaction reaction : msg.getReactions()) {
                    transcript.append(reaction.getEmoji().getName()).append(":").append(reaction.getCount()).append(" ");
                }
                transcript.append("\n");
            }
            transcript.append("\n");
        }

        // Footer
        transcript.append("=== END OF TRANSCRIPT ===\n");
        return transcript.toString();
    }

    /**
     * Saves the plain text transcript to a file.
     */
    public static File saveTranscriptToFile(TextChannel channel, String content) throws IOException {
        File transcriptsDir = new File("transcripts");
        if (!transcriptsDir.exists()) transcriptsDir.mkdirs();

        String fileName = String.format("%s_%s.txt",
                channel.getName(),
                LocalDateTime.now(TIMEZONE_OFFSET).format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")));

        File transcriptFile = new File(transcriptsDir, fileName);
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(transcriptFile))) {
            writer.write(content);
        }
        System.out.println("Transcript saved: " + transcriptFile.getAbsolutePath());
        return transcriptFile;
    }

    /**
     * Create HTML transcript (more advanced formatting).
     */
    public static String createHtmlTranscript(TextChannel channel, List<Message> messages) {
        StringBuilder html = new StringBuilder();

        List<Message> sortedMessages = messages.stream()
                .sorted((m1, m2) -> m1.getTimeCreated().compareTo(m2.getTimeCreated()))
                .toList();

        // HTML header and CSS styles
        html.append("<!DOCTYPE html>\n<html>\n<head>\n");
        html.append("<meta charset='UTF-8'>\n");
        html.append("<title>Ticket Transcript - ").append(channel.getName()).append("</title>\n");
        html.append("<style>\n");
        html.append("body { font-family: 'Segoe UI', Arial, sans-serif; background: #36393f; color: #dcddde; margin: 0; padding: 20px; }\n");
        html.append(".header { background: #2f3136; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n");
        html.append(".close-info { background: #5865f2; padding: 15px; border-radius: 8px; margin-bottom: 20px; }\n");
        html.append(".message { margin-bottom: 15px; padding: 10px; background: #40444b; border-radius: 8px; }\n");
        html.append(".author { font-weight: bold; color: #ffffff; margin-bottom: 5px; }\n");
        html.append(".timestamp { color: #72767d; font-size: 12px; margin-left: 10px; }\n");
        html.append(".content { margin-top: 5px; line-height: 1.4; }\n");
        html.append(".bot-tag { background: #5865f2; color: white; padding: 2px 4px; border-radius: 3px; font-size: 10px; }\n");
        html.append(".embed { border-left: 4px solid #5865f2; padding: 10px; margin: 10px 0; background: #2f3136; }\n");
        html.append(".embed-close { border-left: 4px solid #f23c43; }\n");
        html.append(".embed-open { border-left: 4px solid #57f287; }\n");
        html.append(".attachment { color: #00b0f4; text-decoration: underline; }\n");
        html.append(".close-reason { background: #f23c43; padding: 8px; border-radius: 4px; margin: 5px 0; }\n");
        html.append(".timeout-info { background: #faa61a; padding: 8px; border-radius: 4px; margin: 5px 0; }\n");
        html.append("</style>\n");
        html.append("</head>\n<body>\n");

        // Header
        html.append("<div class='header'>\n");
        html.append("<h1>Ticket Transcript</h1>\n");
        html.append("<p><strong>Channel:</strong> ").append(channel.getName()).append(" (").append(channel.getId()).append(")</p>\n");
        html.append("<p><strong>Guild:</strong> ").append(channel.getGuild().getName()).append("</p>\n");
        html.append("<p><strong>Generated:</strong> ").append(LocalDateTime.now(TIMEZONE_OFFSET).format(TRANSCRIPT_FORMATTER)).append(TIMEZONE_SUFFIX).append("</p>\n");
        html.append("<p><strong>Total Messages:</strong> ").append(sortedMessages.size()).append("</p>\n");
        if (channel.getTopic() != null && !channel.getTopic().isEmpty()) {
            html.append("<p><strong>Ticket Owner:</strong> &lt;@").append(channel.getTopic()).append("&gt;</p>\n");
        }
        html.append("</div>\n\n");

        // Add close request info section
        String closeRequestInfo = getCloseRequestInfoHtml(channel.getId());
        if (closeRequestInfo != null && !closeRequestInfo.isEmpty()) {
            html.append(closeRequestInfo);
        }

        // Messages
        for (Message message : sortedMessages) {
            html.append("<div class='message'>\n");
            html.append("<div class='author'>").append(escapeHtml(message.getAuthor().getName()));

            if (message.getAuthor().isBot()) {
                html.append(" <span class='bot-tag'>BOT</span>");
            }

            html.append("<span class='timestamp'>")
                    .append(message.getTimeCreated().atZoneSameInstant(TIMEZONE_OFFSET).format(TRANSCRIPT_FORMATTER))
                    .append(TIMEZONE_SUFFIX)
                    .append("</span></div>\n");

            String content = message.getContentDisplay();
            if (!content.isEmpty()) {
                // Remove "Please choose an action:" from content
                content = content.replaceAll("Please choose an action:", "").trim();
                if (!content.isEmpty()) {
                    html.append("<div class='content'>").append(escapeHtml(content)).append("</div>\n");
                }
            }

            for (var embed : message.getEmbeds()) {
                String embedClass = "embed";
                if (embed.getTitle() != null) {
                    if (embed.getTitle().contains("Closed") || embed.getTitle().contains("Close Request")) {
                        embedClass += " embed-close";
                    } else if (embed.getTitle().contains("Re-opened")) {
                        embedClass += " embed-open";
                    }
                }

                html.append("<div class='").append(embedClass).append("'>\n");
                if (embed.getTitle() != null) {
                    html.append("<strong>").append(escapeHtml(embed.getTitle())).append("</strong><br>\n");
                }
                if (embed.getDescription() != null) {
                    String description = escapeHtml(embed.getDescription());
                    // Remove "Please choose an action:" from embed descriptions
                    description = description.replaceAll("Please choose an action:", "").trim();
                    if (!description.isEmpty()) {
                        html.append(description).append("<br>\n");
                    }
                }

                // Process embed fields
                for (var field : embed.getFields()) {
                    if (field.getName() != null && field.getValue() != null) {
                        String fieldName = field.getName();
                        String fieldValue = field.getValue();

                        if (fieldName.contains("Timeout") || fieldName.contains("Auto")) {
                            html.append("<div class='timeout-info'>");
                            html.append("<strong>").append(escapeHtml(fieldName)).append(":</strong> ");
                            html.append(escapeHtml(fieldValue));
                            html.append("</div>\n");
                        } else if (fieldName.contains("Reason")) {
                            html.append("<div class='close-reason'>");
                            html.append("<strong>").append(escapeHtml(fieldName)).append(":</strong> ");
                            html.append(escapeHtml(fieldValue));
                            html.append("</div>\n");
                        } else {
                            html.append("<strong>").append(escapeHtml(fieldName)).append(":</strong> ");
                            html.append(escapeHtml(fieldValue)).append("<br>\n");
                        }
                    }
                }
                html.append("</div>\n");
            }

            for (var attachment : message.getAttachments()) {
                html.append("<div class='content'>");
                html.append("<a href='").append(attachment.getUrl()).append("' class='attachment' target='_blank'>");
                html.append("📎 ").append(escapeHtml(attachment.getFileName()));
                html.append(" (").append(getReadableFileSize(attachment.getSize())).append(")");
                html.append("</a></div>\n");
            }
            html.append("</div>\n\n");
        }

        // Footer
        html.append("<div class='header'>\n");
        html.append("<p><em>Generated by Discord Ticket Bot</em></p>\n");
        html.append("</div>\n");
        html.append("</body>\n</html>");

        return html.toString();
    }

    /**
     * Saves the HTML transcript to a file.
     */
    public static File saveHtmlTranscriptToFile(TextChannel channel, String htmlContent) throws IOException {
        File transcriptsDir = new File("transcripts");
        if (!transcriptsDir.exists()) {
            transcriptsDir.mkdirs();
        }

        String timestamp = LocalDateTime.now(TIMEZONE_OFFSET).format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss"));
        String filename = String.format("%s_%s_%s.html",
                channel.getName(),
                channel.getId(),
                timestamp);

        File transcriptFile = new File(transcriptsDir, filename);

        try (FileWriter writer = new FileWriter(transcriptFile)) {
            writer.write(htmlContent);
        }

        System.out.println("✅ HTML transcript saved: " + transcriptFile.getAbsolutePath());
        return transcriptFile;
    }

    /**
     * Appends close request information to the transcript if available.
     */
    private static void appendCloseRequestInfo(String channelId, StringBuilder transcript) {
        try {
            CloseRequestDAO closeRequestDAO = new CloseRequestDAO();
            CloseRequestDAO.CloseRequestDetails details = closeRequestDAO.getCloseRequestDetails(channelId);

            if (details != null) {
                transcript.append("\n=== CLOSE REQUEST DETAILS ===\n");
                transcript.append("Requested by: ").append(details.requestedBy).append("\n");
                transcript.append("Ticket owner: ").append(details.ticketOwner).append("\n");
                transcript.append("Reason: ").append(details.reason != null ? details.reason : "No reason provided").append("\n");

                if (details.timeoutHours != null) {
                    transcript.append("Auto-close timeout: ").append(details.timeoutHours).append(" hours\n");
                } else {
                    transcript.append("Auto-close timeout: Not set\n");
                }

                transcript.append("Status: ").append(details.status).append("\n");
                transcript.append("Created at: ").append(details.createdAt != null ?
                        details.createdAt.toLocalDateTime().atOffset(TIMEZONE_OFFSET).format(TRANSCRIPT_FORMATTER) + TIMEZONE_SUFFIX : "Unknown").append("\n");

                if (details.respondedAt != null) {
                    transcript.append("Responded at: ").append(
                            details.respondedAt.toLocalDateTime().atOffset(TIMEZONE_OFFSET).format(TRANSCRIPT_FORMATTER) + TIMEZONE_SUFFIX).append("\n");
                }

                if (details.respondedBy != null) {
                    transcript.append("Responded by: ").append(details.respondedBy).append("\n");
                }

                if (details.excludedFromAutoClose) {
                    transcript.append("Excluded from auto-close: Yes\n");
                }
            }
        } catch (Exception e) {
            transcript.append("\n=== CLOSE REQUEST DETAILS ===\n");
            transcript.append("Could not retrieve close request details: ").append(e.getMessage()).append("\n");
        }
    }

    /**
     * Get close request information formatted for HTML.
     */
    private static String getCloseRequestInfoHtml(String channelId) {
        try {
            CloseRequestDAO closeRequestDAO = new CloseRequestDAO();
            CloseRequestDAO.CloseRequestDetails details = closeRequestDAO.getCloseRequestDetails(channelId);

            if (details != null) {
                StringBuilder html = new StringBuilder();
                html.append("<div class='close-info'>\n");
                html.append("<h3>🔒 Close Request Information</h3>\n");
                html.append("<p><strong>Requested by:</strong> &lt;@").append(details.requestedBy).append("&gt;</p>\n");
                html.append("<p><strong>Ticket owner:</strong> &lt;@").append(details.ticketOwner).append("&gt;</p>\n");
                html.append("<p><strong>Reason:</strong> ").append(escapeHtml(details.reason != null ? details.reason : "No reason provided")).append("</p>\n");

                if (details.timeoutHours != null) {
                    html.append("<p><strong>Auto-close timeout:</strong> ").append(details.timeoutHours).append(" hours</p>\n");
                }

                html.append("<p><strong>Status:</strong> ").append(escapeHtml(details.status)).append("</p>\n");

                if (details.createdAt != null) {
                    html.append("<p><strong>Created:</strong> ").append(
                            details.createdAt.toLocalDateTime().atOffset(TIMEZONE_OFFSET).format(TRANSCRIPT_FORMATTER)).append(TIMEZONE_SUFFIX).append("</p>\n");
                }

                if (details.respondedAt != null) {
                    html.append("<p><strong>Responded:</strong> ").append(
                            details.respondedAt.toLocalDateTime().atOffset(TIMEZONE_OFFSET).format(TRANSCRIPT_FORMATTER)).append(TIMEZONE_SUFFIX).append("</p>\n");
                }

                if (details.excludedFromAutoClose) {
                    html.append("<p><strong>⚠️ Excluded from auto-close</strong></p>\n");
                }

                html.append("</div>\n\n");
                return html.toString();
            }
        } catch (Exception e) {
            System.err.println("Could not retrieve close request details for HTML: " + e.getMessage());
        }

        return null;
    }

    /**
     * Process message content to remove unwanted phrases.
     */
    private static String processMessageContent(String content) {
        if (content == null) return "";
        // Remove "Please choose an action:" from message content
        return content.replaceAll("Please choose an action:", "").trim();
    }

    /**
     * Enhance close request information in embed descriptions.
     */
    private static String enhanceCloseRequestInfo(String description) {
        if (description == null) return "";

        // Remove "Please choose an action:"
        description = description.replaceAll("Please choose an action:", "").trim();

        // Add additional parsing for timeout information if needed
        if (description.contains("Original Close Request:")) {
            // Already contains detailed info, just clean it up
            return description;
        }

        return description;
    }

    /**
     * Converts Discord timestamp format <t:timestamp:format> to readable datetime format.
     */
    private static String convertDiscordTimestamps(String text) {
        if (text == null) return null;

        Matcher matcher = DISCORD_TIMESTAMP_PATTERN.matcher(text);
        StringBuffer result = new StringBuffer();

        while (matcher.find()) {
            try {
                long timestamp = Long.parseLong(matcher.group(1));
                LocalDateTime dateTime = LocalDateTime.ofInstant(Instant.ofEpochSecond(timestamp), TIMEZONE_OFFSET);
                String formattedDate = dateTime.format(TRANSCRIPT_FORMATTER) + TIMEZONE_SUFFIX;
                matcher.appendReplacement(result, formattedDate);
            } catch (NumberFormatException e) {
                matcher.appendReplacement(result, matcher.group(0));
            }
        }
        matcher.appendTail(result);
        return result.toString();
    }

    /**
     * Escape HTML characters for safe display.
     */
    private static String escapeHtml(String input) {
        if (input == null) return "";
        return input.replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;")
                .replace("\"", "&quot;")
                .replace("'", "&#39;")
                .replace("\n", "<br>");
    }

    /**
     * Get file size in human readable format (e.g., 1.2 KB, 5.4 MB).
     */
    public static String getReadableFileSize(long bytes) {
        if (bytes < 1024) return bytes + " B";
        int exp = (int) (Math.log(bytes) / Math.log(1024));
        String pre = "KMGTPE".charAt(exp - 1) + "";
        return String.format("%.1f %sB", bytes / Math.pow(1024, exp), pre);
    }

    /**
     * Serves an HTML transcript file via a simple web server and returns a URL.
     * This creates a temporary web server to serve the HTML file.
     */
    public static String serveHtmlTranscript(File htmlFile, String channelName) {
        try {
            // Create a simple HTTP server to serve the HTML file
            int port = 3000; // Fixed port for serving HTML transcripts
            
            // Start a simple HTTP server in a separate thread
            Thread serverThread = new Thread(() -> {
                try {
                    SimpleHttpServer server = new SimpleHttpServer(port, htmlFile);
                    server.start();
                    
                    // Keep the server running for a reasonable time (e.g., 1 hour)
                    Thread.sleep(3600000); // 1 hour
                    server.stop();
                } catch (Exception e) {
                    System.err.println("Error running HTTP server: " + e.getMessage());
                }
            });
            serverThread.setDaemon(true);
            serverThread.start();
            
            // Return the URL
            return "http://localhost:" + port + "/transcript";
            
        } catch (Exception e) {
            System.err.println("Failed to serve HTML transcript: " + e.getMessage());
            // Fallback: return a file:// URL (less ideal but functional)
            return "file://" + htmlFile.getAbsolutePath().replace("\\", "/");
        }
    }

    /**
     * Simple HTTP server to serve HTML transcripts.
     */
    private static class SimpleHttpServer {
        private final int port;
        private final File htmlFile;
        private java.net.ServerSocket serverSocket;
        private boolean running = false;

        public SimpleHttpServer(int port, File htmlFile) {
            this.port = port;
            this.htmlFile = htmlFile;
        }

        public void start() throws Exception {
            serverSocket = new java.net.ServerSocket(port);
            running = true;
            System.out.println("✅ HTML transcript server started on port " + port);

            while (running) {
                try (java.net.Socket clientSocket = serverSocket.accept()) {
                    handleRequest(clientSocket);
                } catch (Exception e) {
                    if (running) {
                        System.err.println("Error handling request: " + e.getMessage());
                    }
                }
            }
        }

        public void stop() {
            running = false;
            try {
                if (serverSocket != null && !serverSocket.isClosed()) {
                    serverSocket.close();
                }
            } catch (Exception e) {
                System.err.println("Error stopping server: " + e.getMessage());
            }
        }

        private void handleRequest(java.net.Socket clientSocket) throws Exception {
            try (java.io.OutputStream out = clientSocket.getOutputStream();
                 java.io.BufferedReader in = new java.io.BufferedReader(
                     new java.io.InputStreamReader(clientSocket.getInputStream()))) {

                // Read the first line of the request
                String requestLine = in.readLine();
                if (requestLine == null) return;

                // Debug logging
                System.out.println("🔍 HTTP Request: " + requestLine);

                // Parse the request line to get the path
                String[] requestParts = requestLine.split(" ");
                if (requestParts.length < 2) return;
                
                String requestPath = requestParts[1];
                System.out.println("🔍 Request Path: " + requestPath);
                
                // Check if the request is for the transcript
                if (!requestPath.equals("/transcript")) {
                    // Return 404 for unknown paths
                    System.out.println("❌ 404 - Unknown path: " + requestPath);
                    String notFoundResponse = "HTTP/1.1 404 Not Found\r\n" +
                                            "Content-Type: text/plain\r\n" +
                                            "Content-Length: 13\r\n" +
                                            "\r\n" +
                                            "Not Found";
                    out.write(notFoundResponse.getBytes());
                    return;
                }

                // Check if the HTML file exists
                if (!htmlFile.exists()) {
                    System.out.println("❌ 404 - HTML file not found: " + htmlFile.getAbsolutePath());
                    String notFoundResponse = "HTTP/1.1 404 Not Found\r\n" +
                                            "Content-Type: text/plain\r\n" +
                                            "Content-Length: 13\r\n" +
                                            "\r\n" +
                                            "File Not Found";
                    out.write(notFoundResponse.getBytes());
                    return;
                }

                // Success response - serve the HTML file
                System.out.println("✅ Serving HTML file: " + htmlFile.getAbsolutePath() + " (size: " + htmlFile.length() + " bytes)");
                String response = "HTTP/1.1 200 OK\r\n" +
                                "Content-Type: text/html; charset=UTF-8\r\n" +
                                "Content-Length: " + htmlFile.length() + "\r\n" +
                                "Access-Control-Allow-Origin: *\r\n" +
                                "\r\n";

                out.write(response.getBytes());
                
                // Send the HTML file content
                try (java.io.FileInputStream fis = new java.io.FileInputStream(htmlFile)) {
                    byte[] buffer = new byte[1024];
                    int bytesRead;
                    while ((bytesRead = fis.read(buffer)) != -1) {
                        out.write(buffer, 0, bytesRead);
                    }
                }
                System.out.println("✅ HTML file served successfully");
            }
        }
    }
}