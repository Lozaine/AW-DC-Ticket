package com.discordticketbot.utils;

import com.discordticketbot.database.CloseRequestDAO;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.entities.MessageEmbed;
import net.dv8tion.jda.api.entities.MessageReaction;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class TranscriptUtil {

    // Use UTC+08:00 timezone (Malaysia/Singapore timezone)
    private static final ZoneOffset TIMEZONE_OFFSET = ZoneOffset.ofHours(8);
    private static final String TIMEZONE_SUFFIX = " UTC+08:00";

    // Pattern to match Discord timestamp format <t:timestamp:format>
    private static final Pattern DISCORD_TIMESTAMP_PATTERN = Pattern.compile("<t:(\\d+):[FfDdTtRr]>");
    private static final DateTimeFormatter TRANSCRIPT_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    /**
     * Creates a plain text transcript content from channel messages.
     * Enhanced to include close request details and better formatting.
     */
    public static String createTranscriptContent(TextChannel channel, List<Message> messages) {
        StringBuilder transcript = new StringBuilder();

        // Sort messages to be in chronological order (oldest first)
        List<Message> sortedMessages = messages.stream()
                .sorted((m1, m2) -> m1.getTimeCreated().compareTo(m2.getTimeCreated()))
                .toList();

        // Header
        transcript.append("=== DISCORD TICKET TRANSCRIPT ===\n");
        transcript.append("Server: ").append(channel.getGuild().getName()).append("\n");
        transcript.append("Channel: ").append(channel.getName()).append("\n");
        transcript.append("Category: ").append(channel.getParentCategory() != null ? channel.getParentCategory().getName() : "None").append("\n");
        transcript.append("Total Messages: ").append(sortedMessages.size()).append("\n");
        transcript.append("Generated: ").append(LocalDateTime.now(TIMEZONE_OFFSET).format(TRANSCRIPT_FORMATTER)).append(TIMEZONE_SUFFIX).append("\n");
        transcript.append("Generated by: Bot System\n");

        // Add close request information if available
        appendCloseRequestInfo(channel.getId(), transcript);

        transcript.append("=====================================\n\n");

        // Messages
        for (Message msg : sortedMessages) {
            String timestamp = msg.getTimeCreated().atZoneSameInstant(TIMEZONE_OFFSET).format(TRANSCRIPT_FORMATTER);
            transcript.append(String.format("[%s%s] %s: %s\n", timestamp, TIMEZONE_SUFFIX, msg.getAuthor().getName(), processMessageContent(msg.getContentDisplay())));

            if (!msg.getEmbeds().isEmpty()) {
                for (MessageEmbed embed : msg.getEmbeds()) {
                    transcript.append("    [EMBED] Title: ").append(embed.getTitle() != null ? embed.getTitle() : "No Title").append("\n");
                    if (embed.getDescription() != null) {
                        String description = convertDiscordTimestamps(embed.getDescription());
                        // Enhanced parsing for close requests
                        description = enhanceCloseRequestInfo(description);
                        transcript.append("    [EMBED] Description: ").append(description).append("\n");
                    }

                    // Process embed fields for additional close request details
                    if (!embed.getFields().isEmpty()) {
                        for (MessageEmbed.Field field : embed.getFields()) {
                            if (field.getName() != null && field.getValue() != null) {
                                transcript.append("    [EMBED] ").append(field.getName()).append(": ").append(field.getValue()).append("\n");
                            }
                        }
                    }
                }
            }

            if (!msg.getAttachments().isEmpty()) {
                for (Message.Attachment attachment : msg.getAttachments()) {
                    transcript.append("    [ATTACHMENT] ").append(attachment.getFileName())
                            .append(" (").append(getReadableFileSize(attachment.getSize())).append(")")
                            .append(" - ").append(attachment.getUrl()).append("\n");
                }
            }

            if (!msg.getReactions().isEmpty()) {
                transcript.append("    [REACTIONS] ");
                for (MessageReaction reaction : msg.getReactions()) {
                    transcript.append(reaction.getEmoji().getName()).append(":").append(reaction.getCount()).append(" ");
                }
                transcript.append("\n");
            }
            transcript.append("\n");
        }

        // Footer
        transcript.append("=== END OF TRANSCRIPT ===\n");
        return transcript.toString();
    }

    /**
     * Saves the plain text transcript to a file.
     */
    public static File saveTranscriptToFile(TextChannel channel, String content) throws IOException {
        File transcriptsDir = new File("transcripts");
        if (!transcriptsDir.exists()) transcriptsDir.mkdirs();

        String fileName = String.format("%s_%s.txt",
                channel.getName(),
                LocalDateTime.now(TIMEZONE_OFFSET).format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")));

        File transcriptFile = new File(transcriptsDir, fileName);
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(transcriptFile))) {
            writer.write(content);
        }
        System.out.println("Transcript saved: " + transcriptFile.getAbsolutePath());
        return transcriptFile;
    }

    /**
     * Appends close request information to the transcript if available.
     */
    private static void appendCloseRequestInfo(String channelId, StringBuilder transcript) {
        try {
            CloseRequestDAO closeRequestDAO = new CloseRequestDAO();
            CloseRequestDAO.CloseRequestDetails details = closeRequestDAO.getCloseRequestDetails(channelId);

            if (details != null) {
                transcript.append("\n=== CLOSE REQUEST DETAILS ===\n");
                transcript.append("Requested by: ").append(details.requestedBy).append("\n");
                transcript.append("Ticket owner: ").append(details.ticketOwner).append("\n");
                transcript.append("Reason: ").append(details.reason != null ? details.reason : "No reason provided").append("\n");

                if (details.timeoutHours != null) {
                    transcript.append("Auto-close timeout: ").append(details.timeoutHours).append(" hours\n");
                } else {
                    transcript.append("Auto-close timeout: Not set\n");
                }

                transcript.append("Status: ").append(details.status).append("\n");
                transcript.append("Created at: ").append(details.createdAt != null ?
                        details.createdAt.toLocalDateTime().atOffset(TIMEZONE_OFFSET).format(TRANSCRIPT_FORMATTER) + TIMEZONE_SUFFIX : "Unknown").append("\n");

                if (details.respondedAt != null) {
                    transcript.append("Responded at: ").append(
                            details.respondedAt.toLocalDateTime().atOffset(TIMEZONE_OFFSET).format(TRANSCRIPT_FORMATTER) + TIMEZONE_SUFFIX).append("\n");
                }

                if (details.respondedBy != null) {
                    transcript.append("Responded by: ").append(details.respondedBy).append("\n");
                }

                if (details.excludedFromAutoClose) {
                    transcript.append("Excluded from auto-close: Yes\n");
                }
            }
        } catch (Exception e) {
            transcript.append("\n=== CLOSE REQUEST DETAILS ===\n");
            transcript.append("Could not retrieve close request details: ").append(e.getMessage()).append("\n");
        }
    }

    /**
     * Process message content to remove unwanted phrases.
     */
    private static String processMessageContent(String content) {
        if (content == null) return "";
        // Remove "Please choose an action:" from message content
        return content.replaceAll("Please choose an action:", "").trim();
    }

    /**
     * Enhance close request information in embed descriptions.
     */
    private static String enhanceCloseRequestInfo(String description) {
        if (description == null) return "";

        // Remove "Please choose an action:"
        description = description.replaceAll("Please choose an action:", "").trim();

        // Add additional parsing for timeout information if needed
        if (description.contains("Original Close Request:")) {
            // Already contains detailed info, just clean it up
            return description;
        }

        return description;
    }

    /**
     * Converts Discord timestamp format <t:timestamp:format> to readable datetime format.
     */
    private static String convertDiscordTimestamps(String text) {
        if (text == null) return null;

        Matcher matcher = DISCORD_TIMESTAMP_PATTERN.matcher(text);
        StringBuffer result = new StringBuffer();

        while (matcher.find()) {
            try {
                long timestamp = Long.parseLong(matcher.group(1));
                LocalDateTime dateTime = LocalDateTime.ofInstant(Instant.ofEpochSecond(timestamp), TIMEZONE_OFFSET);
                String formattedDate = dateTime.format(TRANSCRIPT_FORMATTER) + TIMEZONE_SUFFIX;
                matcher.appendReplacement(result, formattedDate);
            } catch (NumberFormatException e) {
                matcher.appendReplacement(result, matcher.group(0));
            }
        }
        matcher.appendTail(result);
        return result.toString();
    }

    /**
     * Get file size in human readable format (e.g., 1.2 KB, 5.4 MB).
     */
    public static String getReadableFileSize(long bytes) {
        if (bytes < 1024) return bytes + " B";
        int exp = (int) (Math.log(bytes) / Math.log(1024));
        String pre = "KMGTPE".charAt(exp - 1) + "";
        return String.format("%.1f %sB", bytes / Math.pow(1024, exp), pre);
    }
}